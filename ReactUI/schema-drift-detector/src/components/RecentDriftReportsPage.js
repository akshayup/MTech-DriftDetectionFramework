import React, { useState, useEffect, useCallback } from 'react';
import { Database, AlertTriangle, FileText, Download, Calendar, Eye, Search, Filter, ChevronLeft, ChevronRight, Loader2, RefreshCw, TrendingUp, TrendingDown } from 'lucide-react';
import { useTheme } from './ThemeContext';
import { driftReportsAPI } from '../api';

// Add this function before the DriftReportDetailsModal component:

// Generate a formatted report summary for copying
const generateReportSummary = (report, changes, summary) => {
  const impact = report.severity === 'High' || report.score > 70 ? 'Critical' :
    report.severity === 'Medium' || report.score > 40 ? 'Moderate' : 'Minor';

  const severityEmoji = {
    'High': '🚨',
    'Medium': '⚠️',
    'Low': '✅'
  }[report.severity] || '📊';

  const typeEmoji = {
    'Schema': '🔧',
    'Distribution': '📈',
    'Statistical': '📊'
  }[report.driftType] || '📋';

  let changeDetails = '';
  if (changes && changes.length > 0) {
    const addedItems = changes.filter(c => c.type === 'Added').map(c => c.column);
    const removedItems = changes.filter(c => c.type === 'Removed').map(c => c.column);
    const modifiedItems = changes.filter(c => c.type === 'Modified').map(c => c.column);

    if (addedItems.length > 0) {
      changeDetails += `➕ Added: ${addedItems.join(', ')}\n`;
    }
    if (removedItems.length > 0) {
      changeDetails += `➖ Removed: ${removedItems.join(', ')}\n`;
    }
    if (modifiedItems.length > 0) {
      changeDetails += `🔄 Modified: ${modifiedItems.join(', ')}\n`;
    }
  }

  // Generate recommendations based on severity and type
  let recommendations = '';
  if (report.severity === 'High') {
    recommendations += '• 🚨 Immediate action required - Review changes before proceeding\n';
  }
  if (report.driftType === 'Schema') {
    recommendations += '• 💡 Update data pipeline configurations\n';
  }
  recommendations += '• 📊 Monitor subsequent data loads\n';
  recommendations += '• 🔍 Consider updating drift detection thresholds\n';

  return `📊 DRIFT REPORT SUMMARY
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📋 BASIC INFORMATION
Dataset: ${report.datasetName}
Report ID: #${report.id}
Date Detected: ${new Date(report.detectedAt).toLocaleString()}

${severityEmoji} SEVERITY: ${report.severity} (Score: ${report.score}/100)
${typeEmoji} DRIFT TYPE: ${report.driftType}
💥 IMPACT LEVEL: ${impact}

📝 SUMMARY
${summary}

${changeDetails ? `🔍 CHANGES DETECTED:\n${changeDetails}` : ''}
⚠️ RECOMMENDATIONS:
${recommendations}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Generated by Schema Drift Detector | ${new Date().toLocaleString()}`;
};
// Drift Report Details Modal Component
const DriftReportDetailsModal = ({ report, onClose, isDark }) => {
  if (!report) return null;

  const parseDetails = (details) => {
    try {
      if (!details) return { changes: [], summary: 'No details available' };

      const detailsText = details.toString();
      const changes = [];
      let summary = '';

      // Parse different types of changes
      const addedMatches = [...detailsText.matchAll(/Added:\s*([^\r\n,]+)/g)];
      const removedMatches = [...detailsText.matchAll(/Removed:\s*([^\r\n,]+)/g)];
      const modifiedMatches = [...detailsText.matchAll(/Modified:\s*([^\r\n,]+)/g)];

      addedMatches.forEach(match => {
        changes.push({ type: 'Added', column: match[1].trim(), icon: '➕', color: 'text-green-600' });
      });

      removedMatches.forEach(match => {
        changes.push({ type: 'Removed', column: match[1].trim(), icon: '➖', color: 'text-red-600' });
      });

      modifiedMatches.forEach(match => {
        changes.push({ type: 'Modified', column: match[1].trim(), icon: '🔄', color: 'text-blue-600' });
      });

      // Generate summary
      const totalChanges = changes.length;
      if (totalChanges > 0) {
        const addedCount = changes.filter(c => c.type === 'Added').length;
        const removedCount = changes.filter(c => c.type === 'Removed').length;
        const modifiedCount = changes.filter(c => c.type === 'Modified').length;

        summary = `${totalChanges} change${totalChanges > 1 ? 's' : ''} detected`;
        if (addedCount > 0) summary += ` • ${addedCount} added`;
        if (removedCount > 0) summary += ` • ${removedCount} removed`;
        if (modifiedCount > 0) summary += ` • ${modifiedCount} modified`;
      } else {
        summary = detailsText || 'No specific changes detected';
      }

      return { changes, summary };
    } catch (error) {
      return { changes: [], summary: 'Error parsing details' };
    }
  };

  const { changes, summary } = parseDetails(report.details);

  const getSeverityBadge = (severity) => {
    const colors = {
      'High': 'bg-red-100 text-red-800 border-red-200',
      'Medium': 'bg-yellow-100 text-yellow-800 border-yellow-200',
      'Low': 'bg-green-100 text-green-800 border-green-200'
    };

    return colors[severity] || 'bg-gray-100 text-gray-800 border-gray-200';
  };

  const getImpactLevel = (severity, score) => {
    if (severity === 'High' || score > 70) return { level: 'Critical', color: 'text-red-600', bg: 'bg-red-50' };
    if (severity === 'Medium' || score > 40) return { level: 'Moderate', color: 'text-yellow-600', bg: 'bg-yellow-50' };
    return { level: 'Minor', color: 'text-green-600', bg: 'bg-green-50' };
  };

  const impact = getImpactLevel(report.severity, report.score);

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className={`${isDark ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow-2xl max-w-4xl w-full max-h-[95vh] flex flex-col overflow-hidden`}>
        {/* Header */}
        <div className={`${isDark ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'} px-6 py-4 border-b flex items-center justify-between flex-shrink-0`}>
          <div className="flex items-center space-x-3">
            <div className={`p-2 rounded-lg ${isDark ? 'bg-blue-900' : 'bg-blue-100'}`}>
              <AlertTriangle className={`h-5 w-5 ${isDark ? 'text-blue-300' : 'text-blue-600'}`} />
            </div>
            <div>
              <h2 className={`text-xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                Drift Report Details
              </h2>
              <p className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                Report ID: {report.id} • {report.datasetName}
              </p>
            </div>
          </div>
          <button
            onClick={onClose}
            className={`p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors ${isDark ? 'text-gray-300' : 'text-gray-500'}`}
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* Content - Scrollable */}
        <div className="flex-1 overflow-y-auto p-6">
          {/* Key Metrics Grid */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            {/* Severity Card */}
            <div className={`${isDark ? 'bg-gray-700' : 'bg-white'} rounded-lg border p-4 ${isDark ? 'border-gray-600' : 'border-gray-200'}`}>
              <div className="flex items-center justify-between mb-2">
                <h3 className={`text-sm font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>Severity Level</h3>
                <AlertTriangle className="h-4 w-4 text-gray-400" />
              </div>
              <div className="flex items-center space-x-2">
                <span className={`px-3 py-1 rounded-full border text-sm font-medium ${getSeverityBadge(report.severity)}`}>
                  {report.severity}
                </span>
              </div>
            </div>

            {/* Score Card */}
            <div className={`${isDark ? 'bg-gray-700' : 'bg-white'} rounded-lg border p-4 ${isDark ? 'border-gray-600' : 'border-gray-200'}`}>
              <div className="flex items-center justify-between mb-2">
                <h3 className={`text-sm font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>Drift Score</h3>
                <TrendingUp className="h-4 w-4 text-gray-400" />
              </div>
              <div className="flex items-center space-x-2">
                <span className={`text-2xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                  {report.score}
                </span>
                <span className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>/ 100</span>
              </div>
            </div>

            {/* Impact Card */}
            <div className={`${isDark ? 'bg-gray-700' : 'bg-white'} rounded-lg border p-4 ${isDark ? 'border-gray-600' : 'border-gray-200'}`}>
              <div className="flex items-center justify-between mb-2">
                <h3 className={`text-sm font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>Impact Level</h3>
                <Database className="h-4 w-4 text-gray-400" />
              </div>
              <div className="flex items-center space-x-2">
                <span className={`px-3 py-1 rounded-full text-sm font-medium ${impact.bg} ${impact.color}`}>
                  {impact.level}
                </span>
              </div>
            </div>
          </div>

          {/* Report Information */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            {/* Basic Information */}
            <div className={`${isDark ? 'bg-gray-700' : 'bg-white'} rounded-lg border p-6 ${isDark ? 'border-gray-600' : 'border-gray-200'}`}>
              <h3 className={`text-lg font-semibold mb-4 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                Report Information
              </h3>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>Dataset:</span>
                  <span className={`text-sm font-medium ${isDark ? 'text-white' : 'text-gray-900'}`}>
                    {report.datasetName}
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>Drift Type:</span>
                  <span className={`px-2 py-1 rounded text-xs font-medium ${isDark ? 'bg-blue-900 text-blue-200' : 'bg-blue-100 text-blue-800'}`}>
                    {report.driftType}
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>Detected:</span>
                  <span className={`text-sm font-medium ${isDark ? 'text-white' : 'text-gray-900'}`}>
                    {new Date(report.detectedAt).toLocaleString()}
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>Report ID:</span>
                  <span className={`text-sm font-mono ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                    #{report.id}
                  </span>
                </div>
              </div>
            </div>

            {/* Summary */}
            <div className={`${isDark ? 'bg-gray-700' : 'bg-white'} rounded-lg border p-6 ${isDark ? 'border-gray-600' : 'border-gray-200'}`}>
              <h3 className={`text-lg font-semibold mb-4 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                Change Summary
              </h3>
              <div className={`p-4 rounded-lg ${isDark ? 'bg-gray-600' : 'bg-gray-50'}`}>
                <p className={`text-sm ${isDark ? 'text-gray-200' : 'text-gray-700'}`}>
                  {summary}
                </p>
              </div>

              {changes.length > 0 && (
                <div className="mt-4">
                  <h4 className={`text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                    Change Breakdown:
                  </h4>
                  <div className="flex flex-wrap gap-2">
                    {['Added', 'Removed', 'Modified'].map(type => {
                      const count = changes.filter(c => c.type === type).length;
                      if (count === 0) return null;

                      const colors = {
                        'Added': 'bg-green-100 text-green-800',
                        'Removed': 'bg-red-100 text-red-800',
                        'Modified': 'bg-blue-100 text-blue-800'
                      };

                      return (
                        <span key={type} className={`px-2 py-1 rounded text-xs font-medium ${colors[type]}`}>
                          {count} {type}
                        </span>
                      );
                    })}
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Detailed Changes */}
          {changes.length > 0 && (
            <div className={`${isDark ? 'bg-gray-700' : 'bg-white'} rounded-lg border p-6 ${isDark ? 'border-gray-600' : 'border-gray-200'} mb-6`}>
              <h3 className={`text-lg font-semibold mb-4 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                Detailed Changes
              </h3>
              <div className="space-y-2">
                {changes.map((change, index) => (
                  <div key={index} className={`flex items-center space-x-3 p-3 rounded-lg ${isDark ? 'bg-gray-600' : 'bg-gray-50'}`}>
                    <span className="text-lg">{change.icon}</span>
                    <div className="flex-1">
                      <span className={`text-sm font-medium ${change.color}`}>
                        {change.type}:
                      </span>
                      <span className={`ml-2 text-sm ${isDark ? 'text-gray-200' : 'text-gray-700'}`}>
                        Column "{change.column}"
                      </span>
                    </div>
                    <span className={`px-2 py-1 rounded text-xs ${change.type === 'Added' ? 'bg-green-100 text-green-800' : change.type === 'Removed' ? 'bg-red-100 text-red-800' : 'bg-blue-100 text-blue-800'}`}>
                      {change.type}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Recommendations */}
          <div className={`${isDark ? 'bg-gray-700' : 'bg-white'} rounded-lg border p-6 ${isDark ? 'border-gray-600' : 'border-gray-200'}`}>
            <h3 className={`text-lg font-semibold mb-4 ${isDark ? 'text-white' : 'text-gray-900'}`}>
              Recommendations
            </h3>
            <div className="space-y-3">
              {report.severity === 'High' && (
                <div className={`p-3 rounded-lg border-l-4 border-red-500 ${isDark ? 'bg-red-900 bg-opacity-20' : 'bg-red-50'}`}>
                  <p className={`text-sm ${isDark ? 'text-red-200' : 'text-red-800'}`}>
                    🚨 <strong>Immediate Action Required:</strong> Review and validate these changes before proceeding with data processing.
                  </p>
                </div>
              )}
              {report.driftType === 'Schema' && (
                <div className={`p-3 rounded-lg border-l-4 border-blue-500 ${isDark ? 'bg-blue-900 bg-opacity-20' : 'bg-blue-50'}`}>
                  <p className={`text-sm ${isDark ? 'text-blue-200' : 'text-blue-800'}`}>
                    💡 <strong>Schema Change Detected:</strong> Update your data pipeline configurations to handle the new schema.
                  </p>
                </div>
              )}
              <div className={`p-3 rounded-lg border-l-4 border-gray-500 ${isDark ? 'bg-gray-600' : 'bg-gray-50'}`}>
                <p className={`text-sm ${isDark ? 'text-gray-200' : 'text-gray-700'}`}>
                  📊 <strong>Next Steps:</strong> Monitor subsequent data loads and consider updating your drift detection thresholds if needed.
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Footer - Fixed at bottom */}
        <div className={`${isDark ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'} px-6 py-4 border-t flex justify-end space-x-3 flex-shrink-0`}>
          <button
            onClick={onClose}
            className={`px-4 py-2 rounded-lg border transition-colors ${isDark
                ? 'border-gray-600 text-gray-300 hover:bg-gray-600'
                : 'border-gray-300 text-gray-700 hover:bg-gray-100'
              }`}
          >
            Close
          </button>


          <button
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            onClick={() => {
              const reportSummary = generateReportSummary(report, changes, summary);
              navigator.clipboard.writeText(reportSummary);
              // Optional: Add a toast notification here to show copy success
            }}
          >
            Copy Report Summary
          </button>
        </div>
      </div>
    </div>
  );
};
// Recent Drift Reports Page - Simplified for single table structure
export const RecentDriftReportsPage = ({ onViewDetails }) => {
  const { isDark } = useTheme();

  // State management
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Search and filter state
  const [searchTerm, setSearchTerm] = useState('');
  const [severityFilter, setSeverityFilter] = useState('all');
  const [datasetFilter, setDatasetFilter] = useState('all');
  const [driftTypeFilter, setDriftTypeFilter] = useState('all');
  const [dateFromFilter, setDateFromFilter] = useState('');
  const [dateToFilter, setDateToFilter] = useState('');

  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [totalItems, setTotalItems] = useState(0);
  const [totalPages, setTotalPages] = useState(0);

  // Modal state - ADD THESE LINES
  const [selectedReport, setSelectedReport] = useState(null);
  const [showModal, setShowModal] = useState(false);

  const [availableDatasets, setAvailableDatasets] = useState([]);
  const [availableDriftTypes, setAvailableDriftTypes] = useState([]);

  // Fetch drift reports from API
  const fetchReports = useCallback(async () => {
    setLoading(true);
    setError(null);

    try {
      const params = {
        page: currentPage,
        limit: itemsPerPage,
        datasetId: datasetFilter !== 'all' ? datasetFilter : undefined,
        severity: severityFilter !== 'all' ? severityFilter : undefined,
        driftType: driftTypeFilter !== 'all' ? driftTypeFilter : undefined,
        fromDate: dateFromFilter,
        toDate: dateToFilter
      };

      const response = await driftReportsAPI.getDriftReports(params);

      // Handle the response structure from our C# API
      const reportsData = response.data || [];
      setReports(reportsData);
      setTotalItems(response.totalCount || 0);
      setTotalPages(response.totalPages || Math.ceil((response.totalCount || 0) / itemsPerPage));

      // Extract unique datasets and drift types for filter dropdowns
      const uniqueDatasets = [...new Set(reportsData.map(r => ({ id: r.datasetId, name: r.datasetName })))];
      const uniqueDriftTypes = [...new Set(reportsData.map(r => r.driftType))].filter(Boolean);

      setAvailableDatasets(uniqueDatasets);
      setAvailableDriftTypes(uniqueDriftTypes);

    } catch (err) {
      setError(err.message || 'Failed to fetch drift reports');
      console.error('Error fetching reports:', err);

      // Fallback to mock data for development
      const mockReports = [
        {
          id: 1,
          datasetName: 'Sales_Daily',
          datasetId: 1,
          score: 10,
          severity: 'Low',
          detectedAt: '2025-08-21T17:35:27.03',
          driftType: 'Schema',
          details: 'Added: newcol16\r\n'
        }
      ];

      setReports(mockReports);
      setTotalItems(mockReports.length);
      setTotalPages(1);
    } finally {
      setLoading(false);
    }
  }, [currentPage, itemsPerPage, datasetFilter, severityFilter, driftTypeFilter, dateFromFilter, dateToFilter]);

  // Effect to fetch data when dependencies change
  useEffect(() => {
    fetchReports();
  }, [fetchReports]);

  // Reset to first page when search/filter changes
  useEffect(() => {
    if (currentPage !== 1) {
      setCurrentPage(1);
    }
  }, [searchTerm, severityFilter, datasetFilter, driftTypeFilter, dateFromFilter, dateToFilter]);

  // Handle filter changes
  const handleSeverityFilter = (severity) => {
    setSeverityFilter(severity);
  };

  const handleDatasetFilter = (datasetId) => {
    setDatasetFilter(datasetId);
  };

  const handleDriftTypeFilter = (driftType) => {
    setDriftTypeFilter(driftType);
  };

  // Handle date range filters
  const handleDateFromChange = (date) => {
    setDateFromFilter(date);
  };

  const handleDateToChange = (date) => {
    setDateToFilter(date);
  };

  // Handle pagination
  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  const handleItemsPerPageChange = (items) => {
    setItemsPerPage(items);
    setCurrentPage(1);
  };

  // Refresh data
  const handleRefresh = () => {
    fetchReports();
  };

  // Clear all filters
  const clearFilters = () => {
    setSearchTerm('');
    setSeverityFilter('all');
    setDatasetFilter('all');
    setDriftTypeFilter('all');
    setDateFromFilter('');
    setDateToFilter('');
    setCurrentPage(1);
  };

  // Handle view details - REPLACE THE EXISTING FUNCTION
  const handleViewDetails = (report) => {
    setSelectedReport(report);
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setShowModal(false);
    setSelectedReport(null);
  };

  // Parse affected features from details
  const parseAffectedFeatures = (report) => {
    let features = [];

    try {
      if (report.details) {
        const detailsText = report.details.toString();

        // Extract column names after "Added:", "Removed:", "Modified:"
        const patterns = [
          /Added:\s*([^\r\n,]+)/g,
          /Removed:\s*([^\r\n,]+)/g,
          /Modified:\s*([^\r\n,]+)/g
        ];

        patterns.forEach(pattern => {
          const matches = [...detailsText.matchAll(pattern)];
          matches.forEach(match => {
            if (match[1]) features.push(match[1].trim());
          });
        });

        // If no specific pattern found, extract any alphanumeric words
        if (features.length === 0) {
          const words = detailsText.match(/\b[a-zA-Z][a-zA-Z0-9_]*\b/g) || [];
          features = words.filter(word =>
            !['Added', 'Removed', 'Modified', 'Schema', 'Distribution', 'Statistical'].includes(word)
          );
        }
      }
    } catch (error) {
      console.warn('Error parsing report details:', error);
    }

    // Remove duplicates and empty values
    features = [...new Set(features.filter(f => f && f.trim()))];

    // Fallback to drift type if no features found
    if (features.length === 0 && report.driftType) {
      features = [report.driftType];
    }

    return features;
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'High':
        return isDark ? 'text-red-400 bg-red-900' : 'text-red-800 bg-red-100';
      case 'Medium':
        return isDark ? 'text-yellow-400 bg-yellow-900' : 'text-yellow-800 bg-yellow-100';
      case 'Low':
        return isDark ? 'text-green-400 bg-green-900' : 'text-green-800 bg-green-100';
      default:
        return isDark ? 'text-gray-400 bg-gray-900' : 'text-gray-800 bg-gray-100';
    }
  };

  const getSeverityIcon = (severity) => {
    switch (severity) {
      case 'High':
        return <TrendingUp className="h-4 w-4 text-red-500" />;
      case 'Medium':
        return <AlertTriangle className="h-4 w-4 text-yellow-500" />;
      case 'Low':
        return <TrendingDown className="h-4 w-4 text-green-500" />;
      default:
        return <AlertTriangle className="h-4 w-4 text-gray-500" />;
    }
  };

  // Calculate simple statistics from current data
  const stats = {
    totalReports: reports.length,
    highSeverity: reports.filter(r => r.severity === 'High').length,
    mediumSeverity: reports.filter(r => r.severity === 'Medium').length,
    lowSeverity: reports.filter(r => r.severity === 'Low').length,
    schemaChanges: reports.filter(r => r.driftType === 'Schema').length,
    avgScore: reports.length > 0 ? (reports.reduce((sum, r) => sum + (r.score || 0), 0) / reports.length).toFixed(1) : 0
  };

  return (
    <div className={`min-h-screen ${isDark ? 'bg-gray-900' : 'bg-gray-50'}`}>
      <div className="max-w-7xl mx-auto px-6 py-8">
        {/* Header */}
        <div className="flex flex-col sm:flex-row sm:items-center justify-between mb-8 gap-4">
          <div>
            <h2 className={`text-3xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
              Drift Reports
            </h2>
            <p className={`mt-2 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
              Monitor schema and data changes across your datasets
            </p>
          </div>
          <div className="flex gap-3">
            <button
              onClick={handleRefresh}
              disabled={loading}
              className={`flex items-center space-x-2 px-4 py-2 rounded-lg border transition-colors ${isDark
                  ? 'border-gray-600 text-gray-300 hover:bg-gray-700 disabled:opacity-50'
                  : 'border-gray-300 text-gray-700 hover:bg-gray-100 disabled:opacity-50'
                }`}
            >
              <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
              <span>Refresh</span>
            </button>
          </div>
        </div>

        {/* Error Display */}
        {error && (
          <div className="mb-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg dark:bg-red-900 dark:border-red-700 dark:text-red-200">
            <p className="font-medium">Error loading reports:</p>
            <p>{error}</p>
          </div>
        )}

        {/* Simple Statistics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className={`${isDark ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow-md p-6`}>
            <div className="flex items-center justify-between">
              <div>
                <p className={`text-sm font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  Total Reports
                </p>
                <p className={`text-2xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                  {stats.totalReports}
                </p>
              </div>
              <FileText className={`h-8 w-8 ${isDark ? 'text-blue-400' : 'text-blue-600'}`} />
            </div>
          </div>

          <div className={`${isDark ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow-md p-6`}>
            <div className="flex items-center justify-between">
              <div>
                <p className={`text-sm font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  High Severity
                </p>
                <p className={`text-2xl font-bold ${isDark ? 'text-red-400' : 'text-red-600'}`}>
                  {stats.highSeverity}
                </p>
              </div>
              <AlertTriangle className={`h-8 w-8 ${isDark ? 'text-red-400' : 'text-red-600'}`} />
            </div>
          </div>

          <div className={`${isDark ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow-md p-6`}>
            <div className="flex items-center justify-between">
              <div>
                <p className={`text-sm font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  Schema Changes
                </p>
                <p className={`text-2xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                  {stats.schemaChanges}
                </p>
              </div>
              <Database className={`h-8 w-8 ${isDark ? 'text-purple-400' : 'text-purple-600'}`} />
            </div>
          </div>

          <div className={`${isDark ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow-md p-6`}>
            <div className="flex items-center justify-between">
              <div>
                <p className={`text-sm font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  Avg Score
                </p>
                <p className={`text-2xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                  {stats.avgScore}
                </p>
              </div>
              <TrendingUp className={`h-8 w-8 ${isDark ? 'text-green-400' : 'text-green-600'}`} />
            </div>
          </div>
        </div>

        {/* Simplified Filters */}
        <div className={`${isDark ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow-md p-6 mb-8`}>
          <div className="flex items-center justify-between mb-4">
            <h3 className={`text-lg font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>
              <Filter className="inline h-5 w-5 mr-2" />
              Filters
            </h3>
            <button
              onClick={clearFilters}
              className={`text-sm px-3 py-1 rounded border transition-colors ${isDark
                  ? 'border-gray-600 text-gray-300 hover:bg-gray-700'
                  : 'border-gray-300 text-gray-700 hover:bg-gray-100'
                }`}
            >
              Clear All
            </button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
            {/* Severity Filter */}
            <div>
              <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                Severity
              </label>
              <select
                value={severityFilter}
                onChange={(e) => handleSeverityFilter(e.target.value)}
                className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${isDark
                    ? 'bg-gray-700 border-gray-600 text-white'
                    : 'bg-white border-gray-300 text-gray-900'
                  }`}
              >
                <option value="all">All Severities</option>
                <option value="High">High</option>
                <option value="Medium">Medium</option>
                <option value="Low">Low</option>
              </select>
            </div>

            {/* Dataset Filter */}
            <div>
              <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                Dataset
              </label>
              <select
                value={datasetFilter}
                onChange={(e) => handleDatasetFilter(e.target.value)}
                className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${isDark
                    ? 'bg-gray-700 border-gray-600 text-white'
                    : 'bg-white border-gray-300 text-gray-900'
                  }`}
              >
                <option value="all">All Datasets</option>
                {availableDatasets.map((dataset) => (
                  <option key={dataset.id} value={dataset.id}>
                    {dataset.name}
                  </option>
                ))}
              </select>
            </div>

            {/* Drift Type Filter */}
            <div>
              <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                Drift Type
              </label>
              <select
                value={driftTypeFilter}
                onChange={(e) => handleDriftTypeFilter(e.target.value)}
                className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${isDark
                    ? 'bg-gray-700 border-gray-600 text-white'
                    : 'bg-white border-gray-300 text-gray-900'
                  }`}
              >
                <option value="all">All Types</option>
                {availableDriftTypes.map((type) => (
                  <option key={type} value={type}>
                    {type}
                  </option>
                ))}
              </select>
            </div>

            {/* Date From */}
            <div>
              <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                From Date
              </label>
              <input
                type="date"
                value={dateFromFilter}
                onChange={(e) => handleDateFromChange(e.target.value)}
                className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${isDark
                    ? 'bg-gray-700 border-gray-600 text-white'
                    : 'bg-white border-gray-300 text-gray-900'
                  }`}
              />
            </div>

            {/* Date To */}
            <div>
              <label className={`block text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                To Date
              </label>
              <input
                type="date"
                value={dateToFilter}
                onChange={(e) => handleDateToChange(e.target.value)}
                className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${isDark
                    ? 'bg-gray-700 border-gray-600 text-white'
                    : 'bg-white border-gray-300 text-gray-900'
                  }`}
              />
            </div>
          </div>
        </div>

        {/* Loading State */}
        {loading && (
          <div className="flex justify-center items-center py-12">
            <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
            <span className={`ml-2 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>Loading reports...</span>
          </div>
        )}

        {/* Reports Table */}
        {!loading && (
          <div className={`${isDark ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow-md`}>
            <div className="p-6 border-b border-gray-200 dark:border-gray-700">
              <h3 className={`text-xl font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                Drift Reports ({totalItems} total)
              </h3>
            </div>

            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className={`${isDark ? 'bg-gray-700' : 'bg-gray-50'}`}>
                  <tr>
                    <th className={`px-6 py-3 text-left text-xs font-medium uppercase tracking-wider ${isDark ? 'text-gray-300' : 'text-gray-500'
                      }`}>
                      Dataset
                    </th>
                    <th className={`px-6 py-3 text-left text-xs font-medium uppercase tracking-wider ${isDark ? 'text-gray-300' : 'text-gray-500'
                      }`}>
                      Drift Type
                    </th>
                    <th className={`px-6 py-3 text-left text-xs font-medium uppercase tracking-wider ${isDark ? 'text-gray-300' : 'text-gray-500'
                      }`}>
                      Severity
                    </th>
                    <th className={`px-6 py-3 text-left text-xs font-medium uppercase tracking-wider ${isDark ? 'text-gray-300' : 'text-gray-500'
                      }`}>
                      Score
                    </th>
                    <th className={`px-6 py-3 text-left text-xs font-medium uppercase tracking-wider ${isDark ? 'text-gray-300' : 'text-gray-500'
                      }`}>
                      Date Detected
                    </th>
                    <th className={`px-6 py-3 text-left text-xs font-medium uppercase tracking-wider ${isDark ? 'text-gray-300' : 'text-gray-500'
                      }`}>
                      Changes
                    </th>
                    <th className={`px-6 py-3 text-left text-xs font-medium uppercase tracking-wider ${isDark ? 'text-gray-300' : 'text-gray-500'
                      }`}>
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className={`${isDark ? 'bg-gray-800' : 'bg-white'} divide-y ${isDark ? 'divide-gray-700' : 'divide-gray-200'}`}>
                  {reports.map((report) => {
                    const features = parseAffectedFeatures(report);

                    return (
                      <tr key={report.id} className={isDark ? 'hover:bg-gray-700' : 'hover:bg-gray-50'}>
                        <td className={`px-6 py-4 whitespace-nowrap ${isDark ? 'text-white' : 'text-gray-900'}`}>
                          <div className="flex items-center">
                            <Database className="h-4 w-4 mr-2 text-gray-400" />
                            {report.datasetName}
                          </div>
                        </td>
                        <td className={`px-6 py-4 whitespace-nowrap ${isDark ? 'text-white' : 'text-gray-900'}`}>
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${isDark ? 'bg-blue-900 text-blue-200' : 'bg-blue-100 text-blue-800'
                            }`}>
                            {report.driftType}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex items-center">
                            {getSeverityIcon(report.severity)}
                            <span className={`ml-2 px-2 py-1 rounded-full text-xs font-medium ${getSeverityColor(report.severity)}`}>
                              {report.severity}
                            </span>
                          </div>
                        </td>
                        <td className={`px-6 py-4 whitespace-nowrap ${isDark ? 'text-white' : 'text-gray-900'}`}>
                          <span className="font-mono text-sm">
                            {report.score}
                          </span>
                        </td>
                        <td className={`px-6 py-4 whitespace-nowrap ${isDark ? 'text-gray-300' : 'text-gray-500'}`}>
                          <div className="flex items-center">
                            <Calendar className="h-4 w-4 mr-1" />
                            {new Date(report.detectedAt).toLocaleDateString()}
                          </div>
                        </td>
                        <td className={`px-6 py-4 ${isDark ? 'text-gray-300' : 'text-gray-500'}`}>
                          <div className="flex flex-wrap gap-1">
                            {features.slice(0, 2).map((feature, index) => (
                              <span
                                key={index}
                                className={`px-2 py-1 rounded text-xs ${isDark ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-700'
                                  }`}
                              >
                                {feature}
                              </span>
                            ))}
                            {features.length > 2 && (
                              <span className={`px-2 py-1 rounded text-xs ${isDark ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-700'
                                }`}>
                                +{features.length - 2} more
                              </span>
                            )}
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <button
                            onClick={() => handleViewDetails(report)}
                            className="flex items-center space-x-1 text-sm px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
                          >
                            <Eye className="h-3 w-3" />
                            <span>Details</span>
                          </button>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>

            {/* No Results */}
            {reports.length === 0 && !loading && (
              <div className="text-center py-12">
                <FileText className={`h-16 w-16 mx-auto ${isDark ? 'text-gray-600' : 'text-gray-400'} mb-4`} />
                <h3 className={`text-lg font-medium ${isDark ? 'text-gray-300' : 'text-gray-900'} mb-2`}>
                  No drift reports found
                </h3>
                <p className={`${isDark ? 'text-gray-400' : 'text-gray-500'} mb-4`}>
                  {severityFilter !== 'all' || datasetFilter !== 'all' || dateFromFilter || dateToFilter
                    ? 'Try adjusting your filters'
                    : 'No drift reports have been generated yet'}
                </p>
                <button
                  onClick={clearFilters}
                  className="flex items-center space-x-2 bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors mx-auto"
                >
                  <RefreshCw className="h-4 w-4" />
                  <span>Clear Filters</span>
                </button>
              </div>
            )}

            {/* Pagination */}
            {reports.length > 0 && totalPages > 1 && (
              <div className="p-6 border-t border-gray-200 dark:border-gray-700">
                <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
                  <div className="flex items-center space-x-2">
                    <span className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                      Show
                    </span>
                    <select
                      value={itemsPerPage}
                      onChange={(e) => handleItemsPerPageChange(Number(e.target.value))}
                      className={`px-3 py-1 border rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${isDark
                          ? 'bg-gray-700 border-gray-600 text-white'
                          : 'bg-white border-gray-300 text-gray-900'
                        }`}
                    >
                      <option value={10}>10</option>
                      <option value={25}>25</option>
                      <option value={50}>50</option>
                    </select>
                    <span className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                      per page
                    </span>
                  </div>

                  <div className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                    Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, totalItems)} of {totalItems} results
                  </div>

                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => handlePageChange(currentPage - 1)}
                      disabled={currentPage === 1}
                      className={`flex items-center space-x-1 px-3 py-2 rounded border transition-colors ${currentPage === 1
                          ? isDark
                            ? 'border-gray-700 text-gray-500 cursor-not-allowed'
                            : 'border-gray-200 text-gray-400 cursor-not-allowed'
                          : isDark
                            ? 'border-gray-600 text-gray-300 hover:bg-gray-700'
                            : 'border-gray-300 text-gray-700 hover:bg-gray-100'
                        }`}
                    >
                      <ChevronLeft className="h-4 w-4" />
                      <span>Previous</span>
                    </button>

                    <span className={`px-3 py-2 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                      Page {currentPage} of {totalPages}
                    </span>

                    <button
                      onClick={() => handlePageChange(currentPage + 1)}
                      disabled={currentPage === totalPages}
                      className={`flex items-center space-x-1 px-3 py-2 rounded border transition-colors ${currentPage === totalPages
                          ? isDark
                            ? 'border-gray-700 text-gray-500 cursor-not-allowed'
                            : 'border-gray-200 text-gray-400 cursor-not-allowed'
                          : isDark
                            ? 'border-gray-600 text-gray-300 hover:bg-gray-700'
                            : 'border-gray-300 text-gray-700 hover:bg-gray-100'
                        }`}
                    >
                      <span>Next</span>
                      <ChevronRight className="h-4 w-4" />
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Modal - ADD THIS AT THE END */}
        {showModal && selectedReport && (
          <DriftReportDetailsModal
            report={selectedReport}
            onClose={handleCloseModal}
            isDark={isDark}
          />
        )}
      </div>
    </div>
  );
};